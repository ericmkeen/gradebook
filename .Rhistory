#' @export
#'
view_missing <- function(course_id,
mode = 'complete'){
if(FALSE){
course_id <- 'ESCI_220'
}
# Get course status
(mrs <- view_status(course_id))
df <- data.frame()
if(nrow(mrs)>0){
df <-
mrs %>%
dplyr::filter(already_due == TRUE,
graded == FALSE)
}
#if(nrow(df)==0){df <- data.frame()}
#df
#return(df)
# Returns
if(nrow(df)==0){
if(verbose){message('No grades missing!')}
return(df)
}else{
if(verbose){message('Found ', nrow(df),' missing grades:\n')}
if(mode == 'complete'){
return(df)
}else{
dfsim <- df %>% select(course, assignment_id, due_date, goes_by)
return(dfsim)
}
}
}
view_missing('ESCI_220') # are any students without a grade for an assignment that was already due?
#' View missing grades
#'
#' If a student does not have a grade for an assignment that was already due, it is a missing grade.
#'
#' @param course_id Course ID.
#' @param mode How much info to provide? The `"simple"` mode just provides the essential info; the `"complete"` mode returns all information.
#'
#' @return A dataframe.
#' @export
#'
view_missing <- function(course_id,
mode = 'complete',
verbose = FALSE){
if(FALSE){
course_id <- 'ESCI_220'
}
# Get course status
(mrs <- view_status(course_id))
df <- data.frame()
if(nrow(mrs)>0){
df <-
mrs %>%
dplyr::filter(already_due == TRUE,
graded == FALSE)
}
#if(nrow(df)==0){df <- data.frame()}
#df
#return(df)
# Returns
if(nrow(df)==0){
if(verbose){message('No grades missing!')}
return(df)
}else{
if(verbose){message('Found ', nrow(df),' missing grades:\n')}
if(mode == 'complete'){
return(df)
}else{
dfsim <- df %>% select(course, assignment_id, due_date, goes_by)
return(dfsim)
}
}
}
view_missing('ESCI_220') # are any students without a grade for an assignment that was already due?
view_missing('ESCI_220', mode = 'simple') # are any students without a grade for an assignment that was already due?
# Update gradebook
#remotes::install_github("ericmkeen/gradebook")
library(gradebook)
# Update gradebook
remotes::install_github("ericmkeen/gradebook")
library(gradebook)
# Set wd to semester grading folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Set course ID
course_id <- 'ESCI_220'
# Quick view of students
view_students('ESCI_220')
view_unshared('ESCI_220') # Return which grades have not yet been shared
email_grades(course_id = 'ESCI_220',
unshared_only = TRUE,
your_email = 'ekezell@sewanee.edu',
json_path = '/Users/ekezell/repos/credentials/desktop_gradebook.json')
rlang::last_trace()
?email_grades
# Update gradebook
remotes::install_github("ericmkeen/gradebook")
# Set wd to semester grading folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Set course ID
course_id <- 'ESCI_220'
library(gradebook)
# Update gradebook
# remotes::install_github("ericmkeen/gradebook")
library(gradebook)
view_unshared('ESCI_220') # Return which grades have not yet been shared
email_grades(course_id = 'ESCI_220',
unshared_only = TRUE,
your_email = 'ekezell@sewanee.edu',
json_path = '/Users/ekezell/repos/credentials/desktop_gradebook.json')
library(gradebook)
# Set wd to semester grading folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Set course ID
course_id <- 'ENST_209'
# Grade
grade()
render_student('ENST_209',
'Cole')
render_student('ENST_209',
'Mary Margaret')
# Grade
grade()
# Grade
grade()
# Grade
grade()
# Set wd to semester grading folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
canned_comments = 'https://docs.google.com/spreadsheets/d/1vClmqxbC5xhGig7hQyaRjx2rkc2vIUvNUkXXN2v4GOU/edit?usp=sharing'
greeting = "Dear STUDENT,\n\nNice work and nice improvement on this second Brief. Anotheer impressive synthesis! \n"
conclusion = "\n\nThank you again!\n\nProf. Ezell"
grade(greeting = greeting,
conclusion = conclusion,
canned_comments = canned_comments,
render = TRUE)
greeting = "Dear STUDENT,\n\nNice work and nice improvement on this second Brief. Anotheer impressive synthesis! \n"
conclusion = "\n\nThank you again!\n\nProf. Ezell"
grade(greeting = greeting,
conclusion = conclusion,
canned_comments = canned_comments,
render = TRUE)
greeting = "Dear STUDENT,\n\nNice work and nice improvement on this second Brief. Anotheer impressive synthesis! \n"
conclusion = "\n\nThank you again!\n\nProf. Ezell"
grade(greeting = greeting,
conclusion = conclusion,
canned_comments = canned_comments,
render = TRUE)
grade(greeting = greeting,
conclusion = conclusion,
canned_comments = canned_comments,
render = TRUE)
greeting = "Dear STUDENT,\n\nNice work and nice improvement on this second Brief. Another impressive synthesis! \n"
conclusion = "\n\nThank you again!\n\nProf. Ezell"
grade(greeting = greeting,
conclusion = conclusion,
canned_comments = canned_comments,
render = TRUE)
greeting = "Dear STUDENT,\n\nNice work and nice improvement on this second Brief. Another impressive synthesis! \n"
conclusion = "\n\nThank you again!\n\nProf. Ezell"
grade(greeting = greeting,
conclusion = conclusion,
canned_comments = canned_comments,
render = TRUE)
canned_comments = 'https://docs.google.com/spreadsheets/d/1vClmqxbC5xhGig7hQyaRjx2rkc2vIUvNUkXXN2v4GOU/edit?usp=sharing'
greeting = "Dear STUDENT,\n\nVery nice work on this Brief. An impressive synthesis! \n"
conclusion = "\n\nThank you again!\n\nProf. Ezell"
grade(greeting = greeting,
conclusion = conclusion,
canned_comments = canned_comments,
render = TRUE)
canned_comments = 'https://docs.google.com/spreadsheets/d/1vClmqxbC5xhGig7hQyaRjx2rkc2vIUvNUkXXN2v4GOU/edit?usp=sharing'
greeting = "Dear STUDENT,\n\nVery nice work on this Brief. An impressive synthesis! \n"
conclusion = "\n\nThank you again!\n\nProf. Ezell"
grade(greeting = greeting,
conclusion = conclusion,
canned_comments = canned_comments,
render = TRUE)
canned_comments = 'https://docs.google.com/spreadsheets/d/1vClmqxbC5xhGig7hQyaRjx2rkc2vIUvNUkXXN2v4GOU/edit?usp=sharing'
greeting = "Dear STUDENT,\n\nVery nice work on this Brief. An impressive synthesis! \n"
conclusion = "\n\nThank you again!\n\nProf. Ezell"
grade(greeting = greeting,
conclusion = conclusion,
canned_comments = canned_comments,
render = TRUE)
view_unshared('ESCI_220') # Return which grades have not yet been shared
grade()
view_missing('ESCI_220', mode = 'simple') # are any students without a grade for an assignment that was already due?
view_unshared('ESCI_220') # Return which grades have not yet been shared
grade()
email_grades(course_id = 'ESCI_220',
unshared_only = TRUE,
your_email = 'ekezell@sewanee.edu',
json_path = '/Users/ekezell/repos/credentials/desktop_gradebook.json')
view_unshared('ENST_101') # Return which grades have not yet been shared
email_grades(course_id = 'ENST_101',
unshared_only = TRUE,
your_email = 'ekezell@sewanee.edu',
json_path = '/Users/ekezell/repos/credentials/desktop_gradebook.json')
course_id <- 'ENST_209'
goes_by <- 'Cole'
# Get class data
(mr <- view_status(course_id))
stud <- goes_by
rm(goes_by)
# Filter to student
(mrs <- mr %>% filter(goes_by == stud))
library(dplyr)
# Filter to student
(mrs <- mr %>% filter(goes_by == stud))
# Filter to rows with a grade or that should already be graded based on due date
(mrs <- mrs[which(mrs$graded | all(c(!is.na(mrs$already_due), mr$already_due==TRUE))),])
# Get exemptions
(exemptions <- paste(mrs %>% filter(exemption == TRUE) %>% pull(assignment_id),
collapse = ', '))
# Remove exemptions
(mrs <- mrs %>% filter(exemption == FALSE))
# Arrange by due date
mrs <- mrs %>% arrange(due_date)
# If a grade is missing (due date is past but no grade, change to 0)
mrs$percent[is.na(mrs$percent)] <- 0
mrs$points[is.na(mrs$points)] <- 0
# Add points possible column
mrs$total_possible <- cumsum(mrs$out_of)
mrs$total_earned <- cumsum(mrs$points)
mrs$total_percent <- 100*round((mrs$total_earned / mrs$total_possible),4)
# View
mrs
# Plot 1: Percents for each grade, arranged chronologically
a <-
ggplot(mrs %>% mutate(rank = n():1)) +
geom_point(mapping = aes(y=rank,
x=percent), color='firebrick', alpha=.7) +
geom_segment(mapping = aes(y=rank, yend=rank,
x=0, xend=percent), color='firebrick', alpha=.7) +
geom_vline(xintercept = mrs$total_percent[nrow(mrs)], lty=2, color='darkblue', alpha=.7) +
scale_x_continuous(limits=c(0,100), breaks=seq(0,100,by=10)) +
scale_y_continuous(labels = rev(mrs$assignment_id)) +
ylab(NULL) + xlab('Assignment grade') +
labs(title=paste0('All grades on record'))
library(ggplot2)
# Plot 1: Percents for each grade, arranged chronologically
a <-
ggplot(mrs %>% mutate(rank = n():1)) +
geom_point(mapping = aes(y=rank,
x=percent), color='firebrick', alpha=.7) +
geom_segment(mapping = aes(y=rank, yend=rank,
x=0, xend=percent), color='firebrick', alpha=.7) +
geom_vline(xintercept = mrs$total_percent[nrow(mrs)], lty=2, color='darkblue', alpha=.7) +
scale_x_continuous(limits=c(0,100), breaks=seq(0,100,by=10)) +
scale_y_continuous(labels = rev(mrs$assignment_id)) +
ylab(NULL) + xlab('Assignment grade') +
labs(title=paste0('All grades on record'))
if(nchar(exemptions)>4){
a <- a + labs(caption = paste0('Exemptions applied to: ', exemptions))
}
a
mrs$assignment_id
# Plot 1: Percents for each grade, arranged chronologically
a <-
ggplot(mrs %>% mutate(rank = n():1)) +
geom_point(mapping = aes(y=rank,
x=percent), color='firebrick', alpha=.7) +
geom_segment(mapping = aes(y=rank, yend=rank,
x=0, xend=percent), color='firebrick', alpha=.7) +
geom_vline(xintercept = mrs$total_percent[nrow(mrs)], lty=2, color='darkblue', alpha=.7) +
scale_x_continuous(limits=c(0,100), breaks=seq(0,100,by=10)) +
scale_y_continuous(breaks = nrow(mrs),  labels = rev(mrs$assignment_id)) +
ylab(NULL) + xlab('Assignment grade') +
labs(title=paste0('All grades on record'))
rlang::last_trace()
# Plot 1: Percents for each grade, arranged chronologically
a <-
ggplot(mrs %>% mutate(rank = n():1)) +
geom_point(mapping = aes(y=rank,
x=percent), color='firebrick', alpha=.7) +
geom_segment(mapping = aes(y=rank, yend=rank,
x=0, xend=percent), color='firebrick', alpha=.7) +
geom_vline(xintercept = mrs$total_percent[nrow(mrs)], lty=2, color='darkblue', alpha=.7) +
#scale_x_continuous(limits=c(0,100), breaks=seq(0,100,by=10)) +
#scale_y_continuous(breaks = nrow(mrs),  labels = rev(mrs$assignment_id)) +
ylab(NULL) + xlab('Assignment grade') +
labs(title=paste0('All grades on record'))
a
# Plot 1: Percents for each grade, arranged chronologically
a <-
ggplot(mrs %>% mutate(rank = n():1)) +
geom_point(mapping = aes(y=rank,
x=percent), color='firebrick', alpha=.7) +
geom_segment(mapping = aes(y=rank, yend=rank,
x=0, xend=percent), color='firebrick', alpha=.7) +
geom_vline(xintercept = mrs$total_percent[nrow(mrs)], lty=2, color='darkblue', alpha=.7) +
scale_x_continuous(limits=c(0,100), breaks=seq(0,100,by=10)) +
#scale_y_continuous(breaks = nrow(mrs),  labels = rev(mrs$assignment_id)) +
ylab(NULL) + xlab('Assignment grade') +
labs(title=paste0('All grades on record'))
a
?scale_y_continuous
# Plot 1: Percents for each grade, arranged chronologically
a <-
ggplot(mrs %>% mutate(rank = n():1)) +
geom_point(mapping = aes(y=rank,
x=percent), color='firebrick', alpha=.7) +
geom_segment(mapping = aes(y=rank, yend=rank,
x=0, xend=percent), color='firebrick', alpha=.7) +
geom_vline(xintercept = mrs$total_percent[nrow(mrs)], lty=2, color='darkblue', alpha=.7) +
scale_x_continuous(limits=c(0,100), breaks=seq(0,100,by=10)) +
scale_y_continuous(n.breaks = nrow(mrs),  labels = rev(mrs$assignment_id)) +
ylab(NULL) + xlab('Assignment grade') +
labs(title=paste0('All grades on record'))
a
# Plot 1: Percents for each grade, arranged chronologically
a <-
ggplot(mrs %>% mutate(rank = n():1)) +
geom_point(mapping = aes(y=rank,
x=percent), color='firebrick', alpha=.7) +
geom_segment(mapping = aes(y=rank, yend=rank,
x=0, xend=percent), color='firebrick', alpha=.7) +
geom_vline(xintercept = mrs$total_percent[nrow(mrs)], lty=2, color='darkblue', alpha=.7) +
scale_x_continuous(limits=c(0,100), breaks=seq(0,100,by=10)) +
scale_y_continuous(breaks = nrow(mrs):1,  labels = rev(mrs$assignment_id)) +
ylab(NULL) + xlab('Assignment grade') +
labs(title=paste0('All grades on record'))
a
# Plot 1: Percents for each grade, arranged chronologically
a <-
ggplot(mrs %>% mutate(rank = n():1)) +
geom_point(mapping = aes(y=rank,
x=percent), color='firebrick', alpha=.7) +
geom_segment(mapping = aes(y=rank, yend=rank,
x=0, xend=percent), color='firebrick', alpha=.7) +
geom_vline(xintercept = mrs$total_percent[nrow(mrs)], lty=2, color='darkblue', alpha=.7) +
scale_x_continuous(limits=c(0,100), breaks=seq(0,100,by=10)) +
scale_y_continuous(breaks = 1:nrow(mrs),  labels = rev(mrs$assignment_id)) +
ylab(NULL) + xlab('Assignment grade') +
labs(title=paste0('All grades on record'))
if(nchar(exemptions)>4){
a <- a + labs(caption = paste0('Exemptions applied to: ', exemptions))
}
a
# Plot 2: Cumulative points earned
b <-
ggplot(mrs) +
geom_point(mapping = aes(x=due_date, y=total_possible), color='darkblue', alpha=.5) +
geom_path(mapping = aes(x=due_date, y=total_possible), lty=2, color='darkblue', alpha=.5) +
geom_area(mapping = aes(x=due_date, y=total_earned), fill='firebrick', alpha=.5) +
geom_point(mapping = aes(x=due_date, y=total_earned), color='firebrick') +
geom_path(mapping = aes(x=due_date, y=total_earned), color='firebrick', alpha=.8, lwd=1.2) +
xlab('Due date') +
ylab('Points') +
labs(title='Points possible (blue dashed lne) vs. points earned (red)')
b
# Plot 3: Running percentage
c <-
ggplot(mrs) +
geom_point(mapping = aes(x=due_date, y=total_percent), color='firebrick') +
geom_area(mapping = aes(x=due_date, y=total_percent), fill='firebrick', alpha=.5) +
geom_path(mapping = aes(x=due_date, y=total_percent), color='firebrick', alpha=.8, lwd=1.2) +
xlab('Due date') +
scale_y_continuous(breaks = seq(0, 100, by=10), limits=c(0,100)) +
geom_hline(yintercept = 100, lty=2) +
ylab('Overall grade') +
labs(title=paste0(stud, ' in ', gsub('_', '', course_id),
': current grade = ',
mrs$total_percent[nrow(mrs)],
'%'))
c
rendered_report <- ggpubr::ggarrange(c, a, ncol=1, nrow=2, heights = c(1, 2))
rendered_report
#' Render grade report for a student
#'
#' @param course_id Course ID
#' @param goes_by Student name (goes_by column)
#'
#' @return A list.
#' @export
#' @import dplyr
#' @import ggplot2
#' @import ggpubr
render_student <- function(course_id,
goes_by){
if(FALSE){ #=======================
course_id <- 'ENST_209'
goes_by <- 'Cole'
}  #===============================
# Get class data
(mr <- view_status(course_id))
stud <- goes_by
rm(goes_by)
# Filter to student
(mrs <- mr %>% filter(goes_by == stud))
# Filter to rows with a grade or that should already be graded based on due date
(mrs <- mrs[which(mrs$graded | all(c(!is.na(mrs$already_due), mr$already_due==TRUE))),])
# Get exemptions
(exemptions <- paste(mrs %>% filter(exemption == TRUE) %>% pull(assignment_id),
collapse = ', '))
# Remove exemptions
(mrs <- mrs %>% filter(exemption == FALSE))
# Arrange by due date
mrs <- mrs %>% arrange(due_date)
# If a grade is missing (due date is past but no grade, change to 0)
mrs$percent[is.na(mrs$percent)] <- 0
mrs$points[is.na(mrs$points)] <- 0
# Add points possible column
mrs$total_possible <- cumsum(mrs$out_of)
mrs$total_earned <- cumsum(mrs$points)
mrs$total_percent <- 100*round((mrs$total_earned / mrs$total_possible),4)
# View
mrs
# Plot 1: Percents for each grade, arranged chronologically
a <-
ggplot(mrs %>% mutate(rank = n():1)) +
geom_point(mapping = aes(y=rank,
x=percent), color='firebrick', alpha=.7) +
geom_segment(mapping = aes(y=rank, yend=rank,
x=0, xend=percent), color='firebrick', alpha=.7) +
geom_vline(xintercept = mrs$total_percent[nrow(mrs)], lty=2, color='darkblue', alpha=.7) +
scale_x_continuous(limits=c(0,100), breaks=seq(0,100,by=10)) +
scale_y_continuous(breaks = 1:nrow(mrs),  labels = rev(mrs$assignment_id)) +
ylab(NULL) + xlab('Assignment grade') +
labs(title=paste0('All grades on record'))
if(nchar(exemptions)>4){
a <- a + labs(caption = paste0('Exemptions applied to: ', exemptions))
}
a
# Plot 2: Cumulative points earned
b <-
ggplot(mrs) +
geom_point(mapping = aes(x=due_date, y=total_possible), color='darkblue', alpha=.5) +
geom_path(mapping = aes(x=due_date, y=total_possible), lty=2, color='darkblue', alpha=.5) +
geom_area(mapping = aes(x=due_date, y=total_earned), fill='firebrick', alpha=.5) +
geom_point(mapping = aes(x=due_date, y=total_earned), color='firebrick') +
geom_path(mapping = aes(x=due_date, y=total_earned), color='firebrick', alpha=.8, lwd=1.2) +
xlab('Due date') +
ylab('Points') +
labs(title='Points possible (blue dashed lne) vs. points earned (red)')
#b
# Plot 3: Running percentage
c <-
ggplot(mrs) +
geom_point(mapping = aes(x=due_date, y=total_percent), color='firebrick') +
geom_area(mapping = aes(x=due_date, y=total_percent), fill='firebrick', alpha=.5) +
geom_path(mapping = aes(x=due_date, y=total_percent), color='firebrick', alpha=.8, lwd=1.2) +
xlab('Due date') +
scale_y_continuous(breaks = seq(0, 100, by=10), limits=c(0,100)) +
geom_hline(yintercept = 100, lty=2) +
ylab('Overall grade') +
labs(title=paste0(stud, ' in ', gsub('_', '', course_id),
': current grade = ',
mrs$total_percent[nrow(mrs)],
'%'))
#c
rendered_report <- ggpubr::ggarrange(c, a, ncol=1, nrow=2, heights = c(1, 2))
#rendered_report <- ggpubr::ggarrange(c, b, a, ncol=1, nrow=3, heights = c(1, 1, 2))
df <- list(data = mrs,
current_grade = mrs$total_percent[nrow(mrs)],
render = rendered_report)
return(df)
}
render_student('ENST_209',
'Mary Margaret')
render_student('ESCI_220',
'Grace Whitley')
render_student('ENST_101',
'Cassie')
render_student('ENST_101',
'Paige')
render_class('ENST_101')
# Update gradebook
remotes::install_github("ericmkeen/gradebook")
# Update gradebook
#remotes::install_github("ericmkeen/gradebook")
library(gradebook)
# Set wd to semester grading folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Set course ID
course_id <- 'ENST_209'
# Grade
grade()
view_missing('ENST_209') # are any students without a grade for an assignment that was already due?
# Grade
grade()
view_missing('ENST_209') # are any students without a grade for an assignment that was already due?
render_student('ENST_209',
'Mary Margaret')
grade()
grade()
view_unshared('ESCI_220') # Return which grades have not yet been shared
email_grades(course_id = 'ESCI_220',
unshared_only = TRUE,
your_email = 'ekezell@sewanee.edu',
json_path = '/Users/ekezell/repos/credentials/desktop_gradebook.json')
view_unshared('ENST_209') # Return which grades have not yet been shared
email_grades(course_id = 'ENST_209',
unshared_only = TRUE,
your_email = 'ekezell@sewanee.edu',
json_path = '/Users/ekezell/repos/credentials/desktop_gradebook.json')
# Update gradebook
#remotes::install_github("ericmkeen/gradebook")
library(gradebook)
# Grade
grade()
# Set wd to semester grading folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Grade
grade()
# Grade
grade()
# Grade
grade()
