width = 7,
height = ggheight)
(line_ratio <- (3*n_standards) / (lines))
line_ratio <- 1.8
if(lines > 0){
if(lines > 30){
(line_ratio <- (3*n_standards) / (lines))
}else{
line_ratio <- 1.8
}
reporti <- ggpubr::ggarrange(p, pf, nrow=2,
heights=c(line_ratio,1))
#reporti
}else{
reporti <- p
}
grade$report <- list(n_standards = n_standards,
feedback_lines = lines,
filename = plot_file,
report = reporti)
grade$report
(ggheight <- (max(c(3.5, .8*grade$report$n_standards)) + 0.3*grade$report$feedback_lines))
ggsave(filename = grade$report$filename,
plot = grade$report$report,
width = 7,
height = ggheight)
(ggheight <- (max(c(3.5, .7*grade$report$n_standards)) + 0.2*grade$report$feedback_lines))
ggsave(filename = grade$report$filename,
plot = grade$report$report,
width = 7,
height = ggheight)
setwd("~/repos/gradebook")
document()
library(devtools)
document()
# Set wd to semester grading folder
setwd("/Users/ekezell/Library/CloudStorage/GoogleDrive-ekezell@sewanee.edu/My Drive/grades/2023 fall")
render_grades
render_grade
# Set wd to semester grading folder
setwd("/Users/ekezell/Library/CloudStorage/GoogleDrive-ekezell@sewanee.edu/My Drive/grades/2023 fall")
# Set course ID
course_id <- 'ESCI_220'
# Students
students_url <- 'https://docs.google.com/spreadsheets/d/1LIcIQssXAkxxoJtCR5A5QAovATB3RbAf3ry2m7gGCIE/edit?usp=sharing'
# Grade
grade()
# Greeting / conclusion for certain assignments
greeting = "Dear STUDENT,\n\nWhat an exciting project idea! I look forward to seeing your full proposal. \n"
conclusion = "\n\nThank you, STUDENT, for making this a meaningful exercise. If you want to brainstorm your idea further, please do not hesitate to reach out.\n\nProf. Ezell"
grade(
greeting = greeting,
conclusion = conclusion,
canned_comments = NULL,
render = TRUE
)
# Students
students_url <- 'https://docs.google.com/spreadsheets/d/1LIcIQssXAkxxoJtCR5A5QAovATB3RbAf3ry2m7gGCIE/edit?usp=sharing'
update_roster('ESCI_220', students_url) # rerun this each time your googlesheet is changed
# Watson pre-proposal
greeting = "Dear STUDENT,\n\nWhat an exciting project idea! I look forward to seeing your full proposal. \n"
conclusion = "\n\nThank you, STUDENT, for making this a meaningful exercise. If you want to brainstorm your idea further, please do not hesitate to reach out.\n\nProf. Ezell"
grade(
greeting = greeting,
conclusion = conclusion,
canned_comments = NULL,
render = TRUE
)
# Students
students_url <- 'https://docs.google.com/spreadsheets/d/1LIcIQssXAkxxoJtCR5A5QAovATB3RbAf3ry2m7gGCIE/edit?usp=sharing'
update_roster('ESCI_220', students_url) # rerun this each time your googlesheet is changed
grade(
greeting = greeting,
conclusion = conclusion,
canned_comments = NULL,
render = TRUE
)
update_roster('ESCI_220', students_url) # rerun this each time your googlesheet is changed
grade(
greeting = greeting,
conclusion = conclusion,
canned_comments = NULL,
render = TRUE
)
view_missing('ESCI_220') # are any students without a grade for an assignment that was already due?
asscat <- 'Briefs'
out_of <- 15
share <- TRUE
rubric <- list('Substance' = 'category',
'<b>First moments:</b> Excellent, engaging, memorable & relevant attention getter, setting the tone for the entire talk.' = grade_scale1,
'Early audience orientation: Sound orientation to topic & clear thesis delivered early. Early moments include preview of main points. Credibility firmly established.' = grade_scale1,
'<b>Compelling justification:</b> The audience is made to care about the issue & context first <b>before any mention</b> of research or method.' = grade_scale1,
'<b>Story & narrative:</b> organization takes the form of a story, taking the audience on a shared journey. Anecdotes and stories are used throughout' = grade_scale1,
'<b>Problem statement & proposed project:</b> justification leads to a clear problem statement & proposed project. What you are proposing to do is crystal clear' = grade_scale1,
'<b>Proposed methods:</b> project plan is presented in an elegant & compelling way, leaving no doubt that this project is feasible, legitimate, and worthwhile' = grade_scale1,
'<b>Pre- & Misconceptions:</b> anticipation of preconceptions regarding topic & presenter, addressed & moved beyond deftly. No elephants in room go unmentioned' = grade_scale1,
'<b>Broader impacts</b>, relevance & importance: compelling case for the importance of topic to the audience’s lives, appealing to heart & gut (empathy)' = grade_scale1,
'<b>Call to action:</b> justification leads to a clear “call to action”, asking the audience to join you in a cause.' = grade_scale1,
'<b>Final moments:</b> clear & memorable summary of points; refers back to thesis/proposed project. Ends with strong take-away/punchline that “seals the deal”.' = grade_scale1,
'<b>Organization overall:</b> audience is given transitions, signposts & reminders that allow them to readily reconstruct the case being made.' = grade_scale1,
'Delivery' = 'category',
'<b>Preparation:</b> clearly well-prepared, evident in the timing of the talk, familiarity with visual aids and what will be said, & little/no reliance upon notes.' = grade_scale1,
'<b>Time allocation:</b> delivered within the allocated time window; time within the talk is allocated strategically. ' = grade_scale1,
'<b>Speech:</b> conversational, sincere, dynamic & compelling; pace of speech is easily followed; no trailing off or rambling; no vocal fillers; impactful use of pauses.' = grade_scale1,
'<b>Language:</b> can articulate meaning clearly through eloquent word choice & premeditated sentences; no unexplained jargon, abbreviations or acronyms.' = grade_scale1,
'<b>Explanation:</b> Any word/concept that may not be understood is explained, either explicitly or within abundant context, at a level appropriate to audience.' = grade_scale1,
'<b>Non-verbal delivery:</b> The “Second Conversation”: Attire, composure, & body language reflect sincerity & professionalism, without sacrificing authenticity.' = grade_scale1,
'<b>Mistakes:</b> mistakes are handled in a graceful & self-forgiving manner; recovery is quick.' = grade_scale1,
'<b>Attentive, responsive, & adaptive:</b> does not presume audience attention, but actively elicits & maintains it, changing course or re-framing something as needed.' = grade_scale1,
'<b>Energetic, credible, human, relatable, genuine, poised, confident but vulnerable, at ease</b>' = grade_scale1,
'<b>Inclusive & welcoming:</b> creates common ground by strongly emphasizing common values/experiences.' = grade_scale1,
'Visual aids' = 'category',
'<b>Strategic use:<b/> redundancy (if any) between what is spoken and what is displayed is strategic, not used as a crutch for presenting.' = grade_scale1,
'<b>Design & display:</b> of professional quality, not sloppy or thrown together. Aids prioritize simplicity, clarity, and good design.' = grade_scale1,
'<b>Visualizing info:</b> Use of text is minimal & appropriately sized. Any data visualization has been reduced to the simplest possible form.' = grade_scale1
)
assignment(course_id = course_id, assignment_category = asscat,
assignment_id = 'Team Brief to the Public',
out_of = 5,
due_date = '2023-11-01',
share = TRUE,
rubric = rubric)
asscat <- 'Research Grant Proposal'
rubric <- list('First page is a Paragraph Breakdown, with a purpose statement for every paragraph in the Intro' = grade_scale3,
'Each paragraph serves a single purpose only' = grade_scale3,
'Each subsequent page provides a collection of source notes for each paragraph, with the purpose statement in bold at the top.' = grade_scale3,
'Every single source note has a parenthetical reference to the source.' = grade_scale3,
'Each paragraph has plenty of associated notes, and all sources in the Lit Review have been referenced.' = grade_scale3,
'<b>Engage & justify:</b> amounts to a carefully planned, convincing argument for the importance & urgency of your project.' = grade_scale1,
'<b>Establish context & convince readers to care.</b> Early into the outline, place your topic in a broad context.' = grade_scale1,
'The first paragraph’s purpose is an accessible & engaging starting point of common ground for optimizing reader buy-in for your project.' = grade_scale1,
'Narrow in on a problem statement (a knowledge gap, an urgent need).' = grade_scale3,
'Follow with a motivation/objectives statement. Your study is a response to the problem statement.' = grade_scale3,
'The paragraphs between the first and the problem statement are designed to guide the reader through a persuasive, well-founded argument for your project’s need.' = grade_scale1,
'Overall the document is highly polished & professionally presented' = grade_scale1)
assignment(course_id = course_id,
assignment_category = asscat,
assignment_id = 'Intro Outline',
out_of = 10,
due_date = '2023-11-03',
share = TRUE,
rubric = rubric)
view_missing('ESCI_220') # are any students without a grade for an assignment that was already due?
view_missing('ESCI_220') # are any students without a grade for an assignment that was already due?
view_unshared('ESCI_220') # Return which grades have not yet been shared
render_class('ESCI_220')
view_unshared('ESCI_220') # Return which grades have not yet been shared
email_grades(course_id = 'ESCI_220',
unshared_only = TRUE,
your_email = 'ekezell@sewanee.edu',
json_path = '/Users/ekezell/repos/credentials/desktop_gradebook.json')
library(dplyr)
library(ggplot2)
library(readr)
library(tidyr)
library(plotly)
library(gapminder)
install.packages('plotly')
install.packages('gapminder')
# Read in data
url <- 'https://raw.githubusercontent.com/ericmkeen/sewanee_esus/master/02_energy_sector/electricity_generation.csv'
# Read in dataset
energy <- read_csv(url, skip=2)
# Rename columns
names(energy) <- c('country', 'technology', 'grid', 'year', 'electricity')
# Ensure `electricity` column is treated as numeric values
energy$electricity <- as.numeric(energy$electricity)
library(babynames)
babynames %>% View
# Plot the total number of names in each year
babynames %>%
group_by(year)
# Plot the total number of names in each year
babynames %>%
group_by(year) %>%
summarize(total = sum(n))
babynames %>% nrow
# Plot the total number of names in each year
babynames %>%
group_by(year) %>%
summarize(total = sum(n))
# Plot the total number of names in each year
baby_years <-
babynames %>%
group_by(year) %>%
summarize(total = sum(n))
ggplot(baby_years,
aes(x = year,
y = total))
ggplot(baby_years,
aes(x = year,
y = total)) +
geom_line()
# Ensure `electricity` column is treated as numeric values
energy$electricity <- as.numeric(energy$electricity)
# Read in dataset
energy <- read_csv(url, skip=2)
# Rename columns
names(energy) <- c('country', 'technology', 'grid', 'year', 'electricity')
# Ensure `electricity` column is treated as numeric values
energy$electricity <- as.numeric(energy$electricity)
energy %>% View
# Q4 How to get unique countries in this data
energy$country %>% unique
# Q4 How to get unique countries in this data
energy$country
energy$country %>% unique
energy %>% pull(country) %>% unique
# Filter this dataset to "United States of America"
energy %>% filter(country == 'United States of America')
# Filter this dataset to "United States of America"
usa <- energy %>% filter(country == 'United States of America')
# plot annual trends in energy use,
ggplot(usa,
aes(x = year,
y = electricity))
# plot annual trends in energy use,
ggplot(usa,
aes(x = year,
y = electricity)) +
geom_line()
# Question 2: load packages
library(ggplot2)
library(dplyr)
library(readr)
# Question 3
url <- 'https://nyc3.digitaloceanspaces.com/owid-public/data/co2/owid-co2-data.csv'
carbon <- read_csv(url)
# Question 6 select certain columns
subcarbon <-
carbon %>%
select(country,
year,
population,
gdp,
co2,
cumulative_co2,
co2_per_gdp)
subcarbon %>% head
subcarbon %>% pull(year)
subcarbon %>% pull(year) %>% unique
subcarbon %>% pull(year) %>% unique %>% max
subcarbon %>% filter(year == 2021)
subcarbon %>% filter(year == 2021) %>% arrange(co2)
subcarbon %>% filter(year == 2021) %>% arrange(co2) %>% tail
ggplot(usa,
aes(x = year,
y = co2)) +
geom_line() +
labs(title = 'Annual CO2 emissions by USA',
subtitle = 'Sweet plot by Eric Ezell',
caption = 'Data provided by Our World In Data')
# Question 7 filter the dataset
usa <- subcarbon %>%
filter(country=='United States')
# Question 2: load packages
library(ggplot2)
ggplot(usa,
aes(x = year,
y = co2)) +
geom_line() +
labs(title = 'Annual CO2 emissions by USA',
subtitle = 'Sweet plot by Eric Ezell',
caption = 'Data provided by Our World In Data')
usa
usa %>% View
ggplot(usa,
aes(x = year,
y = co2)) +
geom_line() +
labs(title = 'Annual CO2 emissions by USA',
subtitle = 'Sweet plot by Eric Ezell',
caption = 'Data provided by Our World In Data')
ggplotly()
usa %>%
filter(co2 == max(usa$co2))
# Set wd to semester grading folder
setwd("/Users/ekezell/Library/CloudStorage/GoogleDrive-ekezell@sewanee.edu/My Drive/grades/2023 fall")
# Update gradebook
#remotes::install_github("ericmkeen/gradebook")
library(gradebook)
# Watson pre-proposal
greeting = "Dear STUDENT,\n\nWhat an exciting project idea! I look forward to seeing your full proposal. \n"
conclusion = "\n\nThank you, STUDENT, for making this a meaningful exercise. If you want to brainstorm your idea further, please do not hesitate to reach out.\n\nProf. Ezell"
grade(
greeting = greeting,
conclusion = conclusion,
canned_comments = NULL,
render = TRUE
)
view_unshared('ESCI_220') # Return which grades have not yet been shared
email_grades(course_id = 'ESCI_220',
unshared_only = TRUE,
your_email = 'ekezell@sewanee.edu',
json_path = '/Users/ekezell/repos/credentials/desktop_gradebook.json')
# Grade
grade()
# Grade
grade()
view_missing('ENST_209') # are any students without a grade for an assignment that was already due?
# Grade
grade()
# Set course ID
course_id <- 'ENST_209'
# Students
students_url <- 'https://docs.google.com/spreadsheets/d/1H4PPmKESpXVsy93QUbU0WhVpqRbg2x-V77EIY0NH0zw/edit?usp=sharing'
update_roster('ENST_209', students_url) # rerun this each time your googlesheet is changed
view_missing('ENST_209') # are any students without a grade for an assignment that was already due?
view_unshared('ENST_209') # Return which grades have not yet been shared
# Update gradebook
#remotes::install_github("ericmkeen/gradebook")
library(gradebook)
# Set wd to semester grading folder
setwd("/Users/ekezell/Library/CloudStorage/GoogleDrive-ekezell@sewanee.edu/My Drive/grades/2023 fall")
# Set course ID
course_id <- 'ENST_101'
# Grade
grade()
view_missing('ENST_101') # are any students without a grade for an assignment that was already due?
# Grade
grade()
view_missing('ENST_101') # are any students without a grade for an assignment that was already due?
# Grade
grade()
# Grade
grade()
view_missing('ENST_101') # are any students without a grade for an assignment that was already due?
# Grade
grade()
view_missing('ENST_101') # are any students without a grade for an assignment that was already due?
# Grade
grade()
view_missing('ENST_101') # are any students without a grade for an assignment that was already due?
render_class('ENST_101')
view_unshared('ENST_101') # Return which grades have not yet been shared
email_grades(course_id = 'ENST_101',
unshared_only = TRUE,
your_email = 'ekezell@sewanee.edu',
json_path = '/Users/ekezell/repos/credentials/desktop_gradebook.json')
# Grade
grade()
view_unshared('ENST_101') # Return which grades have not yet been shared
email_grades(course_id = 'ENST_101',
unshared_only = TRUE,
your_email = 'ekezell@sewanee.edu',
json_path = '/Users/ekezell/repos/credentials/desktop_gradebook.json')
render_class('ENST_101')
render_student('ENST_101',
'Sparrow')
ggplot()
# plot annual trends in energy use,
ggplot(usa,
aes(x = year,
y = electricity)) +
geom_line()
# Question 2: Library
library(dplyr)
library(ggplot2)
library(readr)
library(tidyr)
library(plotly)
library(gapminder)
# Read in data
url <- 'https://raw.githubusercontent.com/ericmkeen/sewanee_esus/master/02_energy_sector/electricity_generation.csv'
# Read in dataset
energy <- read_csv(url, skip=2)
# Rename columns
names(energy) <- c('country', 'technology', 'grid', 'year', 'electricity')
# Ensure `electricity` column is treated as numeric values
energy$electricity <- as.numeric(energy$electricity)
library(babynames)
# Plot the total number of names in each year
baby_years <-
babynames %>%
group_by(year) %>%
summarize(total = sum(n))
ggplot(baby_years,
aes(x = year,
y = total)) +
geom_line()
# Q4 How to get unique countries in this data
energy$country %>% unique
energy %>% pull(country) %>% unique
# plot annual trends in energy use,
ggplot(usa,
aes(x = year,
y = electricity)) +
geom_line()
# Q5: Plot annual energy use by technology for the USA
# Filter this dataset to "United States of America"
usa <- energy %>% filter(country == 'United States of America')
# plot annual trends in energy use,
ggplot(usa,
aes(x = year,
y = electricity)) +
geom_line()
# plot annual trends in energy use,
ggplot(usa,
aes(x = year,
y = electricity,
color = technology)) +
geom_line()
ggplot(usa,
aes(x = year,
y = electricity,
color = technology)) +
geom_line(color = technology)
ggplot(usa,
aes(x = year,
y = electricity,
color = technology))
# plot annual trends in energy use,
ggplot(usa,
aes(x = year,
y = electricity,
color = technology)) +
geom_line()
ggplotly()
usa %>%
group_by(year) %>%
summarize(total = sum(electricity))
usa %>%
group_by(year) %>%
summarize(total = sum(electricity, na.rm = TRUE))
usa_years <- usa %>%
group_by(year) %>%
summarize(total = sum(electricity, na.rm = TRUE))
ggplot(usa_years,
aes(x = year,
y = total))
ggplot(usa_years,
aes(x = year,
y = total)) +
geom_line()
top_two <- energy %>% filter(country %in% c('United States of America',
'China'))
top_two_years <-
top_two %>%
group_by(country, year) %>%
summarize(total = sum(electricity, na.rm = TRUE))
top_two_years %>% head
top_two_years %>% tail
ggplot(top_two_years,
aes(x = year,
y = total)) +
geom_line()
ggplot(top_two_years,
aes(x = year,
y = total,
color = country)) +
geom_line()
energy %>%
filter(year == 2020) %>%
group_by(country) %>%
summarize(total = sum(electricity, na.rm=TRUE))
energy %>%
filter(year == 2020) %>%
group_by(country) %>%
summarize(total = sum(electricity, na.rm=TRUE)) %>%
arrange(total)
energy %>%
filter(year == 2020) %>%
group_by(country) %>%
summarize(total = sum(electricity, na.rm=TRUE)) %>%
arrange(desc(total))
energy %>%
filter(year == 2020) %>%
group_by(country) %>%
summarize(total = sum(electricity, na.rm=TRUE)) %>%
arrange(desc(total)) %>%
pull(country)
energy %>%
filter(year == 2020) %>%
group_by(country) %>%
summarize(total = sum(electricity, na.rm=TRUE)) %>%
arrange(desc(total)) %>%
pull(country) %>%
head()
energy %>%
filter(year == 2020) %>%
group_by(country) %>%
summarize(total = sum(electricity, na.rm=TRUE)) %>%
arrange(desc(total)) %>%
pull(country) %>%
head(10)
energy %>%
filter(year == 2020) %>%
group_by(country) %>%
summarize(total = sum(electricity, na.rm=TRUE)) %>%
arrange(total) %>%
pull(country) %>%
tail(10)
energy %>%
filter(year == 2020) %>%
group_by(country) %>%
summarize(total = sum(electricity, na.rm=TRUE)) %>%
arrange(desc(total)) %>%
pull(country) %>%
head(10)
top_ten <-
energy %>%
filter(year == 2020) %>%
group_by(country) %>%
summarize(total = sum(electricity, na.rm=TRUE)) %>%
arrange(desc(total)) %>%
pull(country) %>%
head(10)
top_ten
energy %>%
filter(country %in% top_ten) %>%
group_by(country, year) %>%
summarize(total = sum(electricity, na.rm=TRUE))
