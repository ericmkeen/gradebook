share <- TRUE
overwrite <- TRUE
portal <- 'https://drive.google.com/drive/folders/1S2Jhtk5xgW_bZonKcQZ7UX-nvxcWvwNtu9ZQ1oUGlKtxS_9rVW5UOydeTINMTozRx6kviV_a?usp=sharing'
data(grade_scale1)
data(grade_scale2)
data(grade_scale3)
rubric <- list('All questions attempted in full' = grade_scale2,
'All code is correct & error-free' = grade_scale3,
'Data visualizations' = grade_scale1)
rubric
# Try it
assignment(course_id, assignment_id, assignment_category,
out_of, due_date, extra_credit, share, rubric, portal,
overwrite)
} #===========================================================================
# Compile list for assignment
ass_list <- list(course_id = course_id,
assignment_id = assignment_id,
assignment_category = assignment_category,
out_of = out_of,
due_date = lubridate::ymd(due_date),
extra_credit = extra_credit,
overwrite = overwrite,
share = share,
show_percentage = show_percentage,
letter_key = letter_key,
portal = portal,
rubric = rubric)
ass_list
#print(ass_list)
# Prepare filename
(ass_fn <- paste0(course_id, '/assignments/', assignment_category, ' --- ', assignment_id, '.rds'))
base::message(ass_fn)
# Save to assignments folder
if(dir.exists(ass_fn)){
base::message(' --- This assignment already exists on file.')
if(overwrite){
base::message(' --- saving assignment (overwrite)...')
saveRDS(ass_list, file=ass_fn)
if(!is.null(rubric)){
base::message(' --- rendering rubric (overwrite)...')
render_rubric(course_id, assignment_id)
}
}
}else{
base::message(' --- This assignment is not yet on file.')
base::message(' --- --- saving assignment...')
saveRDS(ass_list, file=ass_fn)
if(!is.null(rubric)){
base::message(' --- --- rendering rubric...')
render_rubric(course_id, assignment_id)
}
}
}
#' Create an assignment
#'
#' Create an assignment for a course, with rubric and all other details attached.
#'
#' @param course_id Course ID
#' @param assignment_id Unique identifier for assignment.
#' @param assignment_category Category of assignments this assignment belongs to (e.g., 'Reading quizzes', or 'Essays', or 'Exams').
#' @param out_of Number of points this assignment is worth.
#' @param due_date Due date of assignment, in the format `YYYY-MM-DD`.
#'
#' @param extra_credit If `TRUE`, this is an extra credit opportunity and should be treated as such in downstream grade calculations.
#'
#' @param share If `TRUE`, the grade for this assignment should be emailed to the students. It can be handy to set this to `FALSE` for regular completion grades, such as reading quizzes.
#'
#' @param rubric Provide an optional rubric here, in the form of a list in which each slot is named with a character string indicating what is being assessed (e.g., 'Quality of writing') and the content of each slot is a grade scale (see built-in dataset `grade_scale1` as an example). If left as `NULL`, the default rubric will be used (see the built-in dataset `default_rubric`).
#'
#' @param show_percentage Boolean; share the precise grade percentage, or just the letter grade?
#'
#' @param letter_key  Optional, and only used if `show_percentage` is `FALSE`; include a key for translating a percentage to a letter grade.
#' For required format, see `data(letter_grade_key)`; you can also type `"default"`, and the function
#' will load `data(letter_grade_key)` for you and use it.
#'
#' @param portal Option to include a URL (as a character string) to the portal where submissions can be found. For convenience only.
#'
#' @param overwrite If `TRUE`, running this function will overwrite any existing assignments with the same `assignment_id`. This is a useful way to update assignment details.
#'
#' @return This function will save this assignment into an `.rds` file within the `assignments` subfolder for the relevant course. It will also save a stylized version of the rubric to the `rubrics` folder.
#' @export
assignment <- function(course_id,
assignment_id,
assignment_category,
out_of,
due_date,
extra_credit = FALSE,
share = TRUE,
rubric = NULL,
show_percentage = TRUE,
letter_key = 'default',
portal = NULL,
overwrite = TRUE){
if(FALSE){ #==================================================================
course_id <- 'ENST_209'
assignment_id <- 'Book podcast'
assignment_category <- 'Book podcast'
out_of <- 3
due_date <- '2023-08-28'
extra_credit <- FALSE
share <- TRUE
overwrite <- TRUE
(response_rubric <- list('Submission seems complete and on-topic' = grade_scale2))
portal <- NULL
course_id <- 'ESCI_220'
assignment_id <- '#1 Carbon emissions'
assignment_category <- 'R workshop'
out_of <- 10
due_date <- '02-03-2023'
extra_credit <- FALSE
share <- TRUE
overwrite <- TRUE
portal <- 'https://drive.google.com/drive/folders/1S2Jhtk5xgW_bZonKcQZ7UX-nvxcWvwNtu9ZQ1oUGlKtxS_9rVW5UOydeTINMTozRx6kviV_a?usp=sharing'
data(grade_scale1)
data(grade_scale2)
data(grade_scale3)
rubric <- list('All questions attempted in full' = grade_scale2,
'All code is correct & error-free' = grade_scale3,
'Data visualizations' = grade_scale1)
rubric
# Try it
assignment(course_id, assignment_id, assignment_category,
out_of, due_date, extra_credit, share, rubric, portal,
overwrite)
} #===========================================================================
# Compile list for assignment
ass_list <- list(course_id = course_id,
assignment_id = assignment_id,
assignment_category = assignment_category,
out_of = out_of,
due_date = lubridate::ymd(due_date),
extra_credit = extra_credit,
overwrite = overwrite,
share = share,
show_percentage = show_percentage,
letter_key = letter_key,
portal = portal,
rubric = rubric)
ass_list
#print(ass_list)
# Prepare filename
(ass_fn <- paste0(course_id, '/assignments/', assignment_category, ' --- ', assignment_id, '.rds'))
base::message(ass_fn)
# Save to assignments folder
if(dir.exists(ass_fn)){
base::message(' --- This assignment already exists on file.')
if(overwrite){
base::message(' --- saving assignment (overwrite)...')
saveRDS(ass_list, file=ass_fn)
if(!is.null(rubric)){
base::message(' --- rendering rubric (overwrite)...')
render_rubric(course_id, assignment_id)
}
}
}else{
base::message(' --- This assignment is not yet on file.')
base::message(' --- --- saving assignment...')
saveRDS(ass_list, file=ass_fn)
if(!is.null(rubric)){
base::message(' --- --- rendering rubric...')
render_rubric(course_id, assignment_id)
}
}
}
(journal_rubric <- list('Three pages of thoughtful reflection on readings' = grade_scale2,
'Quiet place entries' = grade_scale2))
weeks <- c(    3,       5,        7,       8,      10,
11,       12,       14)
due_dates <- c('01-30', '02-13', '02-27', '03-04', '03-20',
'03-27', '04-03', '04-17')
(journal_rubric <- list('Three pages of thoughtful reflection on readings' = grade_scale2,
'Quiet place entries' = grade_scale2))
weeks <- c(    3,       5,        7,       8,      10,
11,       12,       14)
due_dates <- c('01-30', '02-13', '02-27', '03-04', '03-20',
'03-27', '04-03', '04-17')
for(i in 1:length(weeks)){
assignment(course_id = 'ENST_421',
assignment_id = paste0('Week ', stringr::str_pad(weeks[i], width=2, side='left', pad='0'), ' journal'),
assignment_category = 'Journal',
out_of = 5,
due_date = paste0('2025-',due_dates[i]),
show_percentage = FALSE,
letter_key = 'default',
share = TRUE,
rubric = journal_rubric)
}
# Set course ID
course_id <- 'ENST_421'
# View simple list of assignments produced by that setup file:
view_assignments('ENST_421')
students_url <- 'https://docs.google.com/spreadsheets/d/15UiUrQx5gLy54e03p7G9vPgQdGgJljp7tEWBm8sCY4c/edit?usp=sharing'
update_roster('ENST_421', students_url)
view_students('ENST_421')
# This command launches the grading app.
# I suggest maximizing the window that pops open for better viewing.
grade()
grade(wrap_rubric = 30, pdf_height = 4)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Set course ID
course_id <- 'ENST_421'
# View simple list of assignments produced by that setup file:
view_assignments('ENST_421')
# Set course ID
course_id <- 'ENST_421'
grade_scale2
grade_scale3
(rollcall_rubric <- list('Complete and careful reading' = grade_scale3,
'Attendance & punctuality' = grade_scale3,
'Roll call forms are complete, including 5 insights' = grade_scale3,
'Originality, profundity & nuance of insights' = grade_scale1a,
'Engagement, professionalism and participation during class' = grade_scale1a))
(rollcall_rubric <- list('Complete and careful reading' = grade_scale3,
'Attendance & punctuality' = grade_scale3,
'Roll call forms are complete, including 5 insights' = grade_scale3,
'Originality, profundity & nuance of insights' = grade_scale1a,
'Engagement, professionalism and participation during class' = grade_scale1a))
chapters <- c('Chapter 1 Landscapes of Fear',
'Chapter 2 Forgotten Beasts',
'Chapter 3 Landscapes of Fear',
'Chapter 5 Giga Ecology',
'Chapter 6 Beasts like us')
due_dates <- c('01-23', '02-06', '03-27', '04-17', '04-29')
(rollcall_rubric <- list('Complete and careful reading' = grade_scale3,
'Attendance & punctuality' = grade_scale3,
'Roll call forms are complete, including 5 insights' = grade_scale3,
'Originality, profundity & nuance of insights' = grade_scale1a,
'Engagement, professionalism and participation during class' = grade_scale1a))
chapters <- c('Chapter 1 Landscapes of Fear',
'Chapter 2 Forgotten Beasts',
'Chapter 3 Landscapes of Fear',
'Chapter 5 Giga Ecology',
'Chapter 6 Beasts like us')
due_dates <- c('01-23', '02-06', '03-27', '04-17', '04-29')
for(i in 1:length(chapters)){
assignment(course_id = 'ENST_421',
assignment_id = chapters[i],
assignment_category = 'Roll Call',
out_of = 5,
due_date = paste0('2025-',due_dates[i]),
show_percentage = FALSE,
letter_key = 'default',
share = TRUE,
rubric = journal_rubric)
}
# Set course ID
course_id <- 'ENST_222'
(rollcall_rubric <- list('Complete and careful reading' = grade_scale3,
'Attendance & punctuality' = grade_scale3,
'Roll call forms are complete, including 5 insights' = grade_scale3,
'Originality, profundity & nuance of insights' = grade_scale1a,
'Engagement, professionalism and participation during class' = grade_scale1a))
chapters <- c('Chapter 1 Landscapes of Fear',
'Chapter 2 Forgotten Beasts',
'Chapter 3 Landscapes of Fear',
'Chapter 5 Giga Ecology',
'Chapter 6 Beasts like us')
due_dates <- c('01-23', '02-06', '03-27', '04-17', '04-29')
for(i in 1:length(chapters)){
assignment(course_id = 'ENST_421',
assignment_id = chapters[i],
assignment_category = 'Roll Call',
out_of = 5,
due_date = paste0('2025-',due_dates[i]),
show_percentage = FALSE,
letter_key = 'default',
share = TRUE,
rubric = journal_rubric)
}
getwd()
(rollcall_rubric <- list('Complete and careful reading' = grade_scale3,
'Attendance & punctuality' = grade_scale3,
'Roll call forms are complete, including 5 insights' = grade_scale3,
'Originality, profundity & nuance of insights' = grade_scale1a,
'Engagement, professionalism and participation during class' = grade_scale1a))
chapters <- c('Chapter 1 Landscapes of Fear',
'Chapter 2 Forgotten Beasts',
'Chapter 3 Landscapes of Fear',
'Chapter 5 Giga Ecology',
'Chapter 6 Beasts like us')
due_dates <- c('01-23', '02-06', '03-27', '04-17', '04-29')
for(i in 1:length(chapters)){
assignment(course_id = 'ENST_222',
assignment_id = chapters[i],
assignment_category = 'Roll Call',
out_of = 5,
due_date = paste0('2025-',due_dates[i]),
show_percentage = FALSE,
letter_key = 'default',
share = TRUE,
rubric = rollcall_rubric)
}
(rollcall_rubric <- list('Complete and careful reading' = grade_scale3,
'Attendance & punctuality' = grade_scale3,
'Roll call forms are complete, including 5 insights, and on time.' = grade_scale3,
'Originality, profundity & nuance of insights' = grade_scale1a,
'Engagement, professionalism and participation during class' = grade_scale1a))
chapters <- c('Chapter 1 Landscapes of Fear',
'Chapter 2 Forgotten Beasts',
'Chapter 3 Landscapes of Fear',
'Chapter 5 Giga Ecology',
'Chapter 6 Beasts like us')
due_dates <- c('01-23', '02-06', '03-27', '04-17', '04-29')
for(i in 1:length(chapters)){
assignment(course_id = 'ENST_222',
assignment_id = chapters[i],
assignment_category = 'Roll Call',
out_of = 5,
due_date = paste0('2025-',due_dates[i]),
show_percentage = FALSE,
letter_key = 'default',
share = TRUE,
rubric = rollcall_rubric)
}
(rollcall_rubric <- list('Attendance & punctuality' = grade_scale3,
'Roll call forms are complete, including 5 insights, and on time.' = grade_scale3,
'Complete and careful reading' = grade_scale3,
'Originality, profundity & nuance of insights' = grade_scale1a,
'Engagement, professionalism and participation during class' = grade_scale1a))
chapters <- c('Chapter 1 Landscapes of Fear',
'Chapter 2 Forgotten Beasts',
'Chapter 3 Landscapes of Fear',
'Chapter 5 Giga Ecology',
'Chapter 6 Beasts like us')
due_dates <- c('01-23', '02-06', '03-27', '04-17', '04-29')
for(i in 1:length(chapters)){
assignment(course_id = 'ENST_222',
assignment_id = chapters[i],
assignment_category = 'Roll Call',
out_of = 5,
due_date = paste0('2025-',due_dates[i]),
show_percentage = FALSE,
letter_key = 'default',
share = TRUE,
rubric = rollcall_rubric)
}
chapters <- c('Chapter 1 Loomings',
'Chapter 2 Forgotten Beasts',
'Chapter 3 Landscapes of Fear',
'Chapter 5 Giga Ecology',
'Chapter 6 Beasts like us')
due_dates <- c('01-23', '02-06', '03-27', '04-17', '04-29')
for(i in 1:length(chapters)){
assignment(course_id = 'ENST_222',
assignment_id = chapters[i],
assignment_category = 'Roll Call',
out_of = 5,
due_date = paste0('2025-',due_dates[i]),
show_percentage = FALSE,
letter_key = 'default',
share = TRUE,
rubric = rollcall_rubric)
}
grade(wrap_rubric = 30, pdf_height = 4)
# Install/update gradebook
remotes::install_github("ericmkeen/gradebook")
# Install/update gradebook
#remotes::install_github("ericmkeen/gradebook")
library(gradebook)
utils::packageVersion('gradebook')
# Set wd to folder housing this R script
library(dplyr)
library(ggplot2)
library(ggplot2)
library(tidyr)
library(plotly)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Set course ID
course_id <- 'ENST_421'
# View simple list of assignments produced by that setup file:
view_assignments('ENST_421')
students_url <- 'https://docs.google.com/spreadsheets/d/15UiUrQx5gLy54e03p7G9vPgQdGgJljp7tEWBm8sCY4c/edit?usp=sharing'
update_roster('ENST_421', students_url)
view_students('ENST_421')
view_students('ENST_421') %>% pull(goes_by)
grade(wrap_rubric = 30, pdf_height = 4)
grade_file <- 'ENST_421/ENST_421 --- Journal --- Week 03 journal --- Brock.RData'
# Read in grade
grade <- readRDS(grade_file)
getwd()
grade_file <- 'ENST_421/grades/ENST_421 --- Journal --- Week 03 journal --- Brock.RData'
# Read in grade
grade <- readRDS(grade_file)
grade %>% names
grade$assignment %>% names
# Get some settings from the assignment
(show_percentage <- ifelse('show_percentage' %in% names(grade$assignment),
grade$assignment$show_percentage, TRUE))
(letter_key <- ifelse('letter_key' %in% names(grade$assignment),
grade$assignment$letter_key, NA))
utils::packageVersion('gradebook')
# Install/update gradebook
#remotes::install_github("ericmkeen/gradebook")
library(gradebook)
# Set wd to folder housing this R script
library(dplyr)
library(ggplot2)
library(tidyr)
library(plotly)
library(rstudioapi)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Set course ID
course_id <- 'ENST_421'
grade(wrap_rubric = 30, pdf_height = 4)
grade_file <- 'ENST_421/grades/ENST_421 --- Journal --- Week 03 journal --- Brock.RData'
# Read in grade
grade <- readRDS(grade_file)
grade %>% names
grade$assignment %>% names
# Get some settings from the assignment
(show_percentage <- ifelse('show_percentage' %in% names(grade$assignment),
grade$assignment$show_percentage, TRUE))
(letter_key <- ifelse('letter_key' %in% names(grade$assignment),
grade$assignment$letter_key, NA))
# Determine letter grade to show
grade$percent
letter_grade <- NA
if(!show_percentage){
# Include letter grade key?
if(!is.na(letter_key)){
if(letter_key == 'default'){
data(letter_grade_key)
}else{
letter_grade_key <- letter_key
}
letter_grade <- sapply(grade$percent, function(x){
(letti <- which(letter_grade_key$grade_floor <= round(x)))
letter_grade_key[letti,]
x_letter <- letter_grade_key$letter_detail[letti[1]]
return(x_letter)
})
}
}
letter_grade
# Convert formatting from HTML to RMD ========================================
standard_rmd <- grade$rubric_grades$standard
standard_rmd <- gsub('<b>','**', standard_rmd)
standard_rmd <- gsub('</b>','**', standard_rmd)
standard_rmd <- gsub('<em>','*', standard_rmd)
standard_rmd <- gsub('</em>','*', standard_rmd)
standard_rmd <- gsub('<u>','**', standard_rmd)
standard_rmd <- gsub('</u>','**', standard_rmd)
standard_rmd
for(i in 1:nrow(grade$rubric_grades)){
if(grade$rubric_grades$decision[i] == 'category'){
standard_rmd[i] <- paste0('**',standard_rmd[i],'**')
}
}
grade$rubric_grades$standard_rmd <- standard_rmd
grade$rubric_grades$rank <- nrow(grade$rubric_grades):1 #%>% factor
wrapper <- function(x, ...) paste(strwrap(x, ...), collapse = "\n")
grade$rubric_grades
grade$rubric_grades$standard_rmd <-
sapply(grade$rubric_grades$standard_rmd, function(x){paste(strwrap(x, wrap_rubric), collapse='<br>')})
grade$rubric_grades$percent <- as.numeric(grade$rubric_grades$percent)
p <-
ggplot(grade$rubric_grades) +
geom_point(mapping=aes(y=rank,
x=percent)) +
geom_segment(mapping=aes(y=rank,
yend=rank,
x=0,
xend=percent),
alpha=.6) +
geom_text(mapping=aes(y=rank,
x=percent,
label=decision),
size= 7/.pt,
vjust = -1.5) +
xlim(0, 100) +
scale_y_continuous(labels=(grade$rubric_grades$standard_rmd),
breaks = grade$rubric_grades$rank,
limits = c(0.8, (max(grade$rubric_grades$rank) + ymax_padding))) +
ylab(NULL) +
xlab('Percentage') +
theme(axis.text.y= ggtext::element_markdown(),
plot.caption = ggtext::element_markdown())
if(!is.na(grade$percent) & show_percentage){
p <- p +
geom_vline(xintercept = grade$percent, lty=2, color='firebrick', lwd=.8, alpha=.6)
}
assi <- paste0(gsub('_',' ',grade$course), '   |   ',
grade$assignment$assignment_category,'   |   ',
grade$assignment$assignment_id)
studi <- paste0('Submitted by ', grade$student$goes_by, '  |  Due date: ',
grade$assignment$due_date)
# Prepare caption
if(show_percentage){
(capti <- paste0('**Percentage**', ' = ', round(grade$percent,1), '<br>',
'**Points toward final grade**', ' = ', round(grade$points,1),' out of ', grade$assignment$out_of))
}else{
(capti <- paste0('**Letter grade**', ' = ', letter_grade, '<br>'))
}
if(grade$exemption == TRUE){
capti <- paste0(capti, '<br>', '**NOTE:** STUDENT **EXEMPTED** FROM THIS ASSIGNMENT UNTIL FURTHER NOTICE.')
}
if(grade$assignment$extra_credit == TRUE){
capti <- paste0(capti, '<br>', '**NOTE:** THIS ASSIGNMENT IS **EXTRA CREDIT**.')
}
if(!is.null(grade$extra_credit)){
if(grade$extra_credit > 0){
capti <- paste0(capti, '<br>', '**Note:** extra credit (',grade$extra_credit,'%) applied.')
}
}
if(grade$penalty > 0){
capti <- paste0(capti, '<br>', '**NOTE:** this assignment received a **penalty** of ', round(100*grade$penalty, 2), '%.<br>',
'*Cause of penalty* = ', grade$penalty_cause)
}
p <- p + labs(title=assi, subtitle=studi, caption= capti)
p
